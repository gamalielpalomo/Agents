
FUNCTION_BLOCK Error_Analizer	

VAR_INPUT				
	Forward_error     : REAL;
	Lateral_error     : REAL;
	Vertical_error    : REAL;
	Velocidad_forward : REAL;
	Velocidad_lateral : REAL;
	Velocidad_vertical: REAL;
END_VAR

VAR_OUTPUT				
	Acelerador : REAL;
	Elevadores : REAL;
	Alerones   : REAL;
	Freno      : REAL;

END_VAR

FUZZIFY Forward_error	// Fuzzify input variable 'Forward_error': {'F_muy_atrasado', 'F_atrasado' , 'F_bien', 'F_adelantado', 'F_muy_adelantado'}
	TERM F_muy_atrasado := (-100000, 1) (-3000, 1) (-2250, 0) ; 
	TERM F_atrasado := (-2750, 0) (-2000, 1) (-500,0);
	TERM F_bien := (-1000, 0) (0,1) (1000,1) (1750,0);
	TERM F_adelantado := (1250,0) (2000,1) (2750, 0);
	TERM F_muy_adelantado := (2250, 0) (3000, 1) (100000, 1);
END_FUZZIFY

FUZZIFY Lateral_error	// Fuzzify input variable 'Lateral_error': {'L_muy_izquierda', 'L_izquierda' , 'L_bien', 'L_derecha', 'L_muy_derecha'}
	TERM L_muy_izquierda := (-5000, 1) (-300, 1) (-220, 0) ; 
	TERM L_izquierda := (-350, 0) (-200, 1) (-120,0);
	TERM L_bien := (-150, 0) (-100,1) (100,1) (150,0);
	TERM L_derecha := (120,0) (200,1) (350, 0);
	TERM L_muy_derecha := (220, 0) (300, 1) (5000, 1);
END_FUZZIFY

FUZZIFY Vertical_error	// Fuzzify input variable 'Vertical_error': {'V_muy_abajo', 'V_abajo' , 'V_bien', 'V_arriba', 'V_muy_arriba'}
	TERM V_muy_abajo := (-8000, 1) (-230, 1) (-150, 0) ; 
	TERM V_abajo := (-220, 0) (-130, 1) (-120,0);
	TERM V_bien := (-80, 0) (-30,1) (30,1) (80,0);
	TERM V_arriba := (120,0) (130,1) (220, 0);
	TERM V_muy_arriba := (150, 0) (230, 1) (8000, 1);
END_FUZZIFY

FUZZIFY Velocidad_forward	// Fuzzify input variable 'Velocidad': { 'F_lento', 'F_normal', 'F_rapido' }
	TERM F_lento := (0, 1) (150, 1) (250,0) ;
	TERM F_normal := (100,0) (300,1) (400,1) (550,0);
	TERM F_rapido := (425,0) (500,1) (800,1);
END_FUZZIFY

FUZZIFY Velocidad_lateral	// Fuzzify input variable 'Velocidad': { 'L_lento', 'L_normal', 'L_rapido' }
	TERM L_lento := (-5, 1) (-2, 1) (-0.5,0) ;
	TERM L_normal := (-3,0) (-1,1) (1,1) (3,0);
	TERM L_rapido := (0.5,0) (2,1) (5,1);
END_FUZZIFY

FUZZIFY Velocidad_vertical	// Fuzzify input variable 'Velocidad': { 'V_lento', 'V_normal', 'V_rapido' }
	TERM V_lento := (-50, 1) (17, 1) (18.5,0) ;
	TERM V_normal := (-20,0) (19,1) (21,1) (60,0);
	TERM V_rapido := (21.5,0) (23,1) (110,1);
END_FUZZIFY

DEFUZZIFY Acelerador			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM normal := (0,1) (0.5,1) (0.75,0);
	TERM rapido := (0.6,0) (0.85,1) (1,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Elevadores			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM abajo := (-1,1) (-0.85,1) (-0.4,0);
	TERM normal := (-0.7,0) (0,1) (0.7,0);
	TERM arriba := (0.4,0) (0.85,1) (1,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Alerones			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM izquierda := (-0.2,1) (-0.15,1) (-0.12,0);
	TERM normal := (-0.1,0) (0,1) (0.1,0);
	TERM derecha := (0.12,0) (0.15,1) (0.2,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Freno			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM nulo := (0,1) (0.75,0);
	TERM poquito := (0.25,0) (1,1) (1.75,0);
	TERM medio := (1.25,0) (2,1) (2.75,0);
	TERM medio_alto := (2.25,0) (3,1) (3.75,0);
	TERM alto := (3.25,0) (4,1) (4.75,0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method

	// Forward_error and Velocidad_forward
	//
	RULE 1 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_lento THEN Acelerador IS rapido;
	RULE 2 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_lento THEN Freno IS nulo;
	RULE 3 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_normal THEN Acelerador IS rapido;
	RULE 4 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_normal THEN Freno IS nulo;
	RULE 5 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_rapido THEN Acelerador IS rapido;
	RULE 6 : IF Forward_error IS F_muy_atrasado AND Velocidad_forward IS F_rapido THEN Freno IS nulo;

	RULE 7 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_lento THEN Acelerador IS rapido;
	RULE 8 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_lento THEN Freno IS nulo;
	RULE 9 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_normal THEN Acelerador IS rapido;
	RULE 10 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_normal THEN Freno IS poquito;
	RULE 11 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_rapido THEN Acelerador IS rapido;
	RULE 12 : IF Forward_error IS F_atrasado AND Velocidad_forward IS F_rapido THEN Freno IS medio;

	RULE 13 : IF Forward_error IS F_bien AND Velocidad_forward IS F_lento THEN Acelerador IS normal;
	RULE 14 : IF Forward_error IS F_bien AND Velocidad_forward IS F_lento THEN Freno IS nulo;
	RULE 15 : IF Forward_error IS F_bien AND Velocidad_forward IS F_normal THEN Acelerador IS normal;
	RULE 16 : IF Forward_error IS F_bien AND Velocidad_forward IS F_normal THEN Freno IS nulo;
	RULE 17 : IF Forward_error IS F_bien AND Velocidad_forward IS F_rapido THEN Acelerador IS normal;
	RULE 18 : IF Forward_error IS F_bien AND Velocidad_forward IS F_rapido THEN Freno IS medio;

	RULE 19 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_lento THEN Acelerador IS rapido;
	RULE 20 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_lento THEN Freno IS medio;
	RULE 21 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_normal THEN Acelerador IS normal;
	RULE 22 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_normal THEN Freno IS poquito;
	RULE 23 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_rapido THEN Acelerador IS normal;
	RULE 24 : IF Forward_error IS F_adelantado AND Velocidad_forward IS F_rapido THEN Freno IS medio;

	RULE 25 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_lento THEN Acelerador IS normal;
	RULE 26 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_lento THEN Freno IS medio;
	RULE 27 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_normal THEN Acelerador IS normal;
	RULE 28 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_normal THEN Freno IS medio_alto;
	RULE 29 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_rapido THEN Acelerador IS normal;
	RULE 30 : IF Forward_error IS F_muy_adelantado AND Velocidad_forward IS F_rapido THEN Freno IS alto;

	/////////
	///Lateral_error and Velocidad_lateral
	//
	RULE 31 : IF Lateral_error IS L_muy_izquierda AND Velocidad_lateral IS L_lento THEN Alerones IS derecha;
	RULE 32 : IF Lateral_error IS L_muy_izquierda AND Velocidad_lateral IS L_normal THEN Alerones IS derecha;
	RULE 33 : IF Lateral_error IS L_muy_izquierda AND Velocidad_lateral IS L_rapido THEN Alerones IS derecha;

	RULE 34 : IF Lateral_error IS L_izquierda AND Velocidad_lateral IS L_lento THEN Alerones IS derecha;
	RULE 35 : IF Lateral_error IS L_izquierda AND Velocidad_lateral IS L_normal THEN Alerones IS derecha;
	RULE 36 : IF Lateral_error IS L_izquierda AND Velocidad_lateral IS L_rapido THEN Alerones IS derecha;

	RULE 37 : IF Lateral_error IS L_bien AND Velocidad_lateral IS L_lento THEN Alerones IS normal;
	RULE 38 : IF Lateral_error IS L_bien AND Velocidad_lateral IS L_normal THEN Alerones IS normal;
	RULE 39 : IF Lateral_error IS L_bien AND Velocidad_lateral IS L_rapido THEN Alerones IS normal;

	RULE 40 : IF Lateral_error IS L_derecha AND Velocidad_lateral IS L_lento THEN Alerones IS izquierda;
	RULE 41 : IF Lateral_error IS L_derecha AND Velocidad_lateral IS L_normal THEN Alerones IS izquierda;
	RULE 42 : IF Lateral_error IS L_derecha AND Velocidad_lateral IS L_rapido THEN Alerones IS izquierda;

	RULE 43 : IF Lateral_error IS L_muy_derecha AND Velocidad_lateral IS L_lento THEN Alerones IS izquierda;
	RULE 44 : IF Lateral_error IS L_muy_derecha AND Velocidad_lateral IS L_normal THEN Alerones IS izquierda;
	RULE 45 : IF Lateral_error IS L_muy_derecha AND Velocidad_lateral IS L_rapido THEN Alerones IS izquierda;

	/////////
	///Vertical_error and Velocidad_vertical
	//
	RULE 46 : IF Vertical_error IS V_muy_abajo AND Velocidad_vertical IS V_lento THEN Elevadores IS arriba ;
	RULE 47 : IF Vertical_error IS V_muy_abajo AND Velocidad_vertical IS V_normal THEN Elevadores IS arriba ;
	RULE 48 : IF Vertical_error IS V_muy_abajo AND Velocidad_vertical IS V_rapido THEN Elevadores IS arriba ;

	RULE 49 : IF Vertical_error IS V_abajo AND Velocidad_vertical IS V_lento THEN Elevadores IS arriba ;
	RULE 50 : IF Vertical_error IS V_abajo AND Velocidad_vertical IS V_normal THEN Elevadores IS arriba ;
	RULE 51 : IF Vertical_error IS V_abajo AND Velocidad_vertical IS V_rapido THEN Elevadores IS arriba ;

	RULE 52 : IF Vertical_error IS V_bien AND Velocidad_vertical IS V_lento THEN Elevadores IS normal;
	RULE 53 : IF Vertical_error IS V_bien AND Velocidad_vertical IS V_normal THEN Elevadores IS normal;
	RULE 54 : IF Vertical_error IS V_bien AND Velocidad_vertical IS V_rapido THEN Elevadores IS normal;

	RULE 55 : IF Vertical_error IS V_arriba AND Velocidad_vertical IS V_lento THEN Elevadores IS abajo;
	RULE 56 : IF Vertical_error IS V_arriba AND Velocidad_vertical IS V_normal THEN Elevadores IS abajo;
	RULE 57 : IF Vertical_error IS V_arriba AND Velocidad_vertical IS V_rapido THEN Elevadores IS abajo;

	RULE 58 : IF Vertical_error IS V_muy_arriba AND Velocidad_vertical IS V_lento THEN Elevadores IS abajo;
	RULE 59 : IF Vertical_error IS V_muy_arriba AND Velocidad_vertical IS V_normal THEN Elevadores IS abajo;
	RULE 60 : IF Vertical_error IS V_muy_arriba AND Velocidad_vertical IS V_rapido THEN Elevadores IS abajo;
END_RULEBLOCK

END_FUNCTION_BLOCK

