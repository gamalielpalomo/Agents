package parser;
import java_cup.runtime.*;
import java.io.FileReader;
import Agenda.Event;
import Agent.Instruction;
import Agent.Knowledge;

parser code{:
    public static void main(String args[])
    {
        try
        {
            SyntacticAnalyzer sa = new SyntacticAnalyzer(new LexicalAnalyzer(new FileReader(args[0])));
            Object result = sa.parse().value;
            System.out.println("Executed!");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
:}

action code{:
    Event event;
    Instruction instruction;
    java.util.HashMap ntpt = Knowledge.nameToPersonType;
    java.util.HashMap ptdt = Knowledge.personTypeToDateType;
:}

terminal SEMI, SCHEDULE, FREE, SLASH, REMOVE, SHOW, DOUBLE, CHANGE, AT, FROM, TO, SPACE, GEN, TELL;
terminal int INT;
terminal String IS, WORK, MEDICAL, PERSONAL, WITH, MEETING, STR;
non terminal Object create, nothing, todo, agend, rem, free1, display, schedule1, schedule2, talk, learn;

todo ::= create|agend|rem|free1|display|talk|learn;
agend ::= schedule1|schedule2;

schedule1 ::= 
SCHEDULE WORK:description AT INT:month SLASH INT:day INT:hour DOUBLE INT:minutes 
{:
    //System.out.format("\n%s date scheduled at %d:%d on %d-%d-%d\n",description,hour,minutes,month,day,year);
    event = new Event(hour, hour+1, month-1, month-1, day, day, description, "nobody");
    //System.out.println("Comparing result: "+tools.EventArray.checkSplice(event));
    Event spliceResult = tools.EventArray.checkSplice(event);
    if(spliceResult != null)
    {
        System.out.println("[Assistant]: You have another event at that date");
        Event majorPriority = Agent.Decision.decideEvent(event, spliceResult);
        instruction = new Instruction(Instruction.Command.CHANGE,spliceResult,majorPriority);
    }
    else
        instruction = new Instruction(Instruction.Command.SCHEDULE,event);
    
:}
|
SCHEDULE PERSONAL:description AT INT:month SLASH INT:day INT:hour DOUBLE INT:minutes 
{:
    //System.out.format("\n%s date scheduled at %d:%d on %d-%d-%d\n",description,hour,minutes,month,day,year);
    event = new Event(hour, hour+1, month-1, month-1, day, day, description, "nobody");
    //System.out.println("Comparing result: "+tools.EventArray.checkSplice(event));
    Event spliceResult = tools.EventArray.checkSplice(event);
    if(spliceResult != null)
    {
        System.out.println("[Assistant]: You have another event at that date");
        Event majorPriority = Agent.Decision.decideEvent(event, spliceResult);
        instruction = new Instruction(Instruction.Command.CHANGE,spliceResult,majorPriority);
    }
    else
        instruction = new Instruction(Instruction.Command.SCHEDULE,event);
:}
|
SCHEDULE MEDICAL:description AT INT:month SLASH INT:day INT:hour DOUBLE INT:minutes 
{:
    //System.out.format("\n%s date scheduled at %d:%d on %d-%d-%d\n",description,hour,minutes,month,day,year);
    event = new Event(hour, hour+1, month-1, month-1, day, day, description, "nobody");
    //System.out.println("Comparing result: "+tools.EventArray.checkSplice(event));
    Event spliceResult = tools.EventArray.checkSplice(event);
    if(spliceResult != null)
    {
        System.out.println("[Assistant]: You have another event at that date");
        Event majorPriority = Agent.Decision.decideEvent(event, spliceResult);
        instruction = new Instruction(Instruction.Command.CHANGE,spliceResult,majorPriority);
    }
    else
        instruction = new Instruction(Instruction.Command.SCHEDULE,event);
:};

schedule2 ::= 
SCHEDULE MEETING WITH STR:companion AT INT:month SLASH INT:day FROM INT:hour DOUBLE INT:minutes TO INT:hour2 DOUBLE INT:minutes2
{:
    //System.out.format("\nMeeting with %s scheduled at %d:%d on %d-%d-%d\n",companion,hour,minutes,month,day,year);
    String personType = (String)ntpt.get(companion);
    String dateType = "personal";
    if(!personType.equals(""))
    {
        dateType = (String)ptdt.get(personType);
    }
    event = new Event(hour, hour2, month-1, month-1, day, day, dateType, companion);
    Event spliceResult = tools.EventArray.checkSplice(event);
    if(spliceResult != null)
    {
        System.out.println("[Assistant]: You have another event at that date");
        Event majorPriority = Agent.Decision.decideEvent(event, spliceResult);
        instruction = new Instruction(Instruction.Command.CHANGE,spliceResult,majorPriority);
    }
    else
        instruction = new Instruction(Instruction.Command.SCHEDULE,event);
:}
|
SCHEDULE MEETING AT INT:month SLASH INT:day FROM INT:hour DOUBLE INT:minutes TO  INT:hour2 DOUBLE INT:minutes2
{:
    event = new Event(hour, hour2, month-1, month-1, day, day, "personal", "nobody");
    Event spliceResult = tools.EventArray.checkSplice(event);
    if(spliceResult != null)
    {
        System.out.println("[Assistant]: You have another event at that date");
        Event majorPriority = Agent.Decision.decideEvent(event, spliceResult);
        instruction = new Instruction(Instruction.Command.CHANGE,spliceResult,majorPriority);
    }
    else
        instruction = new Instruction(Instruction.Command.SCHEDULE,event);
:}
;

rem ::=  REMOVE STR:description AT INT:month SLASH INT:day SLASH INT:year INT:hour DOUBLE INT:minutes
{:
    System.out.format("\nRemove %s",description);
    event = new Event(description);
    instruction = new Instruction(Instruction.Command.REMOVE, event);
:}
;

free1 ::= FREE AT INT:month SLASH INT:day SLASH INT:year FROM INT:hour DOUBLE INT:minutes TO INT:hour2 DOUBLE INT:minutes2
{:
    event = new Event(hour, hour2, month-1, month-1, day, day, "free", "nobody");
    java.util.ArrayList spliceResult = tools.EventArray.checkSplices(event);
    if(spliceResult.size() != 0)
    {
        System.out.println("[Assistant]: That matches with an event, freeing agenda.");
        instruction = new Instruction(Instruction.Command.FREE,spliceResult);
    }
    else
        instruction = new Instruction(Instruction.Command.NOTHING);
:}
;
display ::= SHOW
{:
    instruction = new Instruction(Instruction.Command.SHOW);
:}
;
talk ::= TELL STR:name
{:
    instruction = new Instruction(Instruction.Command.TELL, name);
:}
;
learn ::= STR:name IS STR:pType
{:
    instruction = new Instruction(Instruction.Command.LEARN, name, pType);
:}
;